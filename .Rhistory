install.packages(c('ggvis','dplyr'))
library(ggvis)
library(dplyr)
read.table('~/eli_resquence/ggvis/poly_stats.istats',header=T)
poly_stats = read.table('~/eli_resquence/ggvis/poly_stats.istats',header=T)
poly_stats  %>% ggvis(~)
colnames(poly_stats)
poly_stats  %>% ggvis(~ID, ~SING)
poly_stats  %>% ggvis(~SING) %>% layer_histograms()
poly_stats  %>% ggvis(~SING) %>% layer_histograms()
p = poly_stats  %>% ggvis(~SING) %>% layer_histograms()
p = poly_stats  %>% ggvis(~SING) %>% layer_histograms() %>%
add_tooltip(poly_stats$ID,'hover')
p = poly_stats  %>% ggvis(~SING) %>% layer_points() %>%
add_tooltip(poly_stats$ID,'hover')
p = poly_stats  %>% ggvis(~SING) %>% layer_points() %>%
p = poly_stats  %>% ggvis(~SING) %>% layer_points() %>%
add_tooltip(poly_stats$ID,'hover')
p = poly_stats  %>% ggvis(~SING,~ID) %>% layer_points() %>%
add_tooltip(poly_stats$ID,'hover')
p = poly_stats  %>% ggvis(x=~SING,y=~NHET,~ID) %>% layer_points() %>%
add_tooltip(poly_stats$ID,'hover')
p = poly_stats  %>% ggvis(x=~SING,y=~NHET,kep :=~ID) %>% layer_points() %>%
add_tooltip(poly_stats$ID,'hover')
p = poly_stats  %>% ggvis(x=~SING,y=~NHET,kep :=~ID) %>% layer_points() %>%
add_tooltip(poly_stats$ID,'hover')
p = poly_stats  %>% ggvis(x=~SING,y=~NHET,key :=~ID) %>% layer_points() %>%
add_tooltip(poly_stats$ID,'hover')
p = poly_stats  %>% ggvis(x=~SING,y=~NHET,key :=~ID) %>% layer_points() %>%
add_tooltip(poly_stats$ID,'hover')
plot(p)
poly_stats  %>% ggvis(x=~SING,y=~NHET,key :=~ID) %>% layer_points() %>%
add_tooltip(poly_stats$ID,'hover')
all_values = function(x) {
oif(is.null(x)) return(NULL)
row = poly_stats[poly_stats$ID==x$ID, ]
paste0(names(row), ": ", format(row), collapse = "<br \>")
}
poly_stats  %>% ggvis(x=~SING,y=~NHET,key :=~ID) %>% layer_points() %>%
add_tooltip(all_values,'hover')
poly_stats  %>% ggvis(x=~SING,y=~NHET,key :=~ID) %>% layer_points() %>%
add_tooltip(all_values,'hover')
all_values
all_values = function(x) {
oif(is.null(x)) return(NULL)
row = poly_stats[poly_stats$ID==x$ID, ]
all_values = function(x) {
oif(is.null(x)) return(NULL)
all_values = function(x) {
oif(is.null(x)) return(NULL)
row = poly_stats[poly_stats$ID==x$ID, ]
paste0(names(row), ": ", format(row), collapse = "<br \>")
all_values = function(x) {
if(is.null(x)) return(NULL)
row = poly_stats[poly_stats$ID==x$ID, ]
paste0(names(row), ": ", format(row), collapse = "<br \>")
all_values = function(x) {
if(is.null(x)) return(NULL)
row = poly_stats[poly_stats$ID==x$ID, ]
paste0(names(row), ": ", format(row), collapse = "<br />")
}
poly_stats  %>% ggvis(x=~SING,y=~NHET,key :=~ID) %>% layer_points() %>%
add_tooltip(all_values,'hover')
poly_stats  %>% ggvis(x=~SING,key :=~ID) %>% layer_points() %>%
add_tooltip(all_values,'hover')
runGitHub("shiny-examples", "rstudio", subdir = "012-datatables")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
names(poly_stats[2:])
names(poly_stats[2:])
poly_stats[2:]
names(poly_stats)
names(poly_stats)[2:]
names(poly_stats)[2:length(names(poly_stats))
names(poly_stats)[2:length(names(poly_stats))]
names(poly_stats)[2:length(names(poly_stats))]
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
as.name('blah')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
poly_stats$"ID"
shiny::runApp()
do.call("$",poly_stats,ID)
do.call("$",poly_stats,"ID)
do.call("$",poly_stats,"ID")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
poly_stats$x_axis
x_axis
x_axis="NALT"
poly_stats$x_axis
poly_stats$as.name(x_axis)
poly_stats$(x_axis)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(Gviz)
install.packages("Gviz")
source("http://bioconductor.org/biocLite.R")
biocLite("Gviz")
source("http://bioconductor.org/biocLite.R")
biocLite("Gviz")
library(Gviz)
axisTrack(GenomeAxisTrack())
axisTrack =  (GenomeAxisTrack())
plotTracks(axisTrack,from = 1000,to 10000)
plotTracks(axisTrack,from = 1000,to = 10000)
poly_stats = read.table('poly_stats.istats',header=T)
poly_stats
names(poly_stats)
names(poly_stats$ID)
(poly_stats$ID)
(poly_stats$ID)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?add_tooltip
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
a = factor(c(1,2))
a
a
which(1 %in a)
which(1 %in% a)
a[-which(1 %in% a)]
a[-which(1 %in% a)]
a[-which(1 %in% a)]
a[-which(1 %in% a)]
a[-which(1 %in% a)]
a[-which(2 %in% a)]
a[which(1 %in% a)]
a[which(2 %in% a)]
a = a[-which(2 %in% a)]
a
a = a[-which(2 %in% a)]
a
a = a[-which(2 %in% a)]
a
a = factor(c(1,2))
a = a[-which(2 %in% a)]
a
a = a[-which(2 %in% a)]
a
a
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
ls
ueaou
runApp()
shiny::runApp()
shiny::runApp()
getwd()
shiny::runApp()
renderTable
xtable
summary(poly_stats)
summary(poly_stats[2:length(poly_stats)])
summary(poly_rct_df[2:length(poly_stats)])
summary(poly_rct_df[2:length(poly_stats)])
shiny::runApp()
shiny::runApp()
shiny::runApp()
names(poly_stats)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
option(traceback=T)
options(traceback=T)
traceback()
shiny::runApp()
shiny::runApp()
}
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
poly_stats = read.table('euro.istats',header=T)
mds=read.table("plink.mds",header=T)
shiny::runApp()
poly_stats = read.table('euro.istats',header=T)
poly_stats
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
urate
phenotypes=read.table("phenotypes_filter.txt",header=T)
urate=read.table("pheno_euro.txt",header=F)
urate
shiny::runApp()
read.table("~/samp_with.txt",header=F)
a = read.table("~/samp_with.txt",header=F)
pheno = read.table("~/phenotypes.txt",sep='\t', header=F)
pheno = read.delim("~/phenotypes.txt",sep='\t', header=F)
pheno = read.delim("~/phenotypes.txt",sep='\t', header=F)
pheno
pheno$V1
pheno = read.delim("~/phenotypes.txt",sep='\t', header=T)
pheno
pheno$PATIENT
merge(a,pheno,by=1)
f = merge(a,pheno,by=1)
plot(f$SURICACID)
plot(f$GOUTSUM)
16
nrow(f)
16*234/(234+206)
16*206/(234+206)
f$SURICACID > 0.35
f$SURICACID > 0.42
f$SURICACID >= 0.42
f$SURICACID >= 0.37
f$SURICACID >= 0.37
sum(f$SURICACID >= 0.370
sum(f$SURICACID >= 0.37)
a = matrix(c(8.509091,7.490909,11,5),nrow=2,ncol=2)
fisher.test(a)
a = matrix(c(8.509091,7.490909,11,5),nrow=2,ncol=2)
chisq.test(a)
a
t(a)
t(a)
a = matrix(c(8.509091,7.490909,11,5),nrow=2,ncol=2)
chisq.test(a)
a
a = matrix(c(11, 8.509091,5,7.490909),nrow=2,ncol=2)
chisq.test(a)
a
t(a)
chisq.test(t(a))
chisq.test(t(a))
a
t(a)
b = read.table("~/samp_with.txt",header=F)
b
t = merge(b,pheno,by=1)
t
plot(t$SURICACID)
chisq.test(c(1,1,2,2))
chisq.test(c(5,5,5,5))
chisq.test(c(5,5,5,3))
chisq.test(c(5,5,5,5))
chisq.test(c(5,5,5,7))
chisq.test(c(5,7,5,7))
chisq.test(c(7,5,5,7))
chisq.test(c(100,5,5,7))
chisq.test(c(10,5,5,7))
chisq.test(c(10,5,10,7))
chisq.test(c(10,5,10,5))
chisq.test(c(10,5,10,12))
chisq.test(c(10,5,10,15))
chisq.test(c(10,5,10,18))
chisq.test(c(10,5,10,18))
library(VariantAnnotation)
vcf = readVCF("~/poly.vcf","hg19")
vcf = readVcf("~/poly.vcf","hg19")
vcf
vcf = readVcf("~/poly.vcf","hg19")
vcf = readVcf("~/poly.vcf","hg19")
vcf
vcf = readVcf("~/pipeline_setup.txt.filter.vcf","hg19")
vcf = readVcf("~/poly.vcf","hg19")
vcf
vcf
vcf = readVcf("~/poly.vcf","hg19")
vcf = readVcf("~/poly.vcf","hg19")
vcf
samps = c("AT0353","AT1337","AT1305")
merger = merge(samples, pheno)
samps = c("AT0353","AT1337","AT1305")
samps
t(samps)
t(t(samps))
samps = t(t(c("AT0353","AT1337","AT1305")))
merger = merge(samples, pheno)
pheno = read.delim("~/phenotypes.txt",sep='\t', header=T)
merger = merge(samples, pheno)
samps = as.data.frame(t(t(c("AT0353","AT1337","AT1305"))))
samps
merger = merge(samples, pheno)
pheno
merger = merge(samples, pheno,by=1)
t = merge(b,pheno,by=1)
merger = merge(samps, pheno,by=1)
plot(merger$SURICACID)
merge
merger
merger$V1
plot(merger$GOUTSUM)
plot(merger$BMI)
plot(merger$SURICACID)
b = read.table("~/samp_with.txt",header=F)
t = merge(b,pheno,by=1)
t
t
samps = as.data.frame(t(t(c("AT0549","AT0735"))))
merger = merge(samps, pheno,by=1)
merger
plot(merger$SURICACID)
plot(merger$BMI)
b = read.table("~/samp_with.txt",header=F)
t = merge(b,pheno,by=1)
plot(t$SURICACID)
plot(t$GOUTSUM)
b
plot(t$BMI)
plot(t$SURICACID)
a = read.table("~/samp_with.txt",header=F)
pheno = read.delim("~/phenotypes.txt",sep='\t', header=T)
f = merge(a,pheno,by=1)
plot(f$SURICACID)
plot(f$SURICACID)
plot(f$SURICACID)
plot(f$GOUTSUM)
plot(f$SURICACID)
plot(f$GOUTSUM)
plot(f$SURICACID)
plot(f$GOUTSUM)
plot(f$SURICACID)
a = read.table("~/samp_with.txt",header=F)
pheno = read.delim("~/phenotypes.txt",sep='\t', header=T)
f = merge(a,pheno,by=1)
plot(f$SURICACID)
f$SURICACID > 0.4
sum(f$SURICACID > 0.4)
sum(f$SURICACID > 0.42)
sum(f$SURICACID < 0.42)
sum(f$SURICACID > 0.4)
sum(f$SURICACID > 0.4) * 234/(234+206)
a = matrix(c(30,46*234/(234+206) ,46*206/(234+206), ),nrow=2,ncol=2)
a = matrix(c(30,46*234/(234+206) ,16,46*206/(234+206)),nrow=2,ncol=2)
a
chisq.test(a)
shiny::runApp()
